{
  "data": {
    "connector_type": "web_crawler",
    "web_crawler": {
      "maxDepth": 2,
      "requests": [
        {
          "url": "play-demo.sitecoredemo.com/sponsors",
          "headers": {
            "user-agent": [
              "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/W.X.Y.Z Mobile Safari/537.36"
            ]
          }
        },
        {
          "url": "play-demo.sitecoredemo.com/vendors",
          "headers": {
            "user-agent": [
              "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/W.X.Y.Z Mobile Safari/537.36"
            ]
          }
        },
        {
          "url": "play-demo.sitecoredemo.com/sessions",
          "headers": {
            "user-agent": [
              "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/W.X.Y.Z Mobile Safari/537.36"
            ]
          }
        },
        {
          "url": "play-demo.sitecoredemo.com/news",
          "headers": {
            "user-agent": [
              "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/W.X.Y.Z Mobile Safari/537.36"
            ]
          }
        },
        {
          "url": "play-demo.sitecoredemo.com/speakers",
          "headers": {
            "user-agent": [
              "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/W.X.Y.Z Mobile Safari/537.36"
            ]
          }
        }
      ],
      "extractor": {
        "extractor_type": "document",
        "request": {
          "type": "js",
          "source": "function extract(request, response) {\n  const $ = response.body;\n  const regex = new RegExp(\n    /\\/(sessions|news|vendors|sponsors|speakers)\\/[^?#]*$/,\n  );\n  return $('a')\n    .toArray()\n    .map((a) => $(a).attr('href'))\n    .filter((url) => regex.test(url))\n    .map((url) => ({ url }));\n}",
          "matchers": [
            {
              "type": "glob",
              "value": "*"
            }
          ]
        },
        "document": {
          "type": "js",
          "matchers": [
            {
              "type": "glob",
              "value": "*/news/*"
            },
            {
              "type": "glob",
              "value": "*/vendors/*"
            },
            {
              "type": "glob",
              "value": "*/sponsors/*"
            },
            {
              "type": "glob",
              "value": "*/sessions/*"
            },
            {
              "type": "glob",
              "value": "*/speakers/*"
            }
          ],
          "taggers": [
            {
              "tag": "content",
              "source": "function extract(request, response) {   function validateData(data, acceptPageType) {     const { query: { path = [] } = {} } = data;     return path[1] === acceptPageType;   }    function getDisplayNameList(list) {     return list.map(({ displayName }) => displayName);   }    function processData(data, acceptPageType) {     const {       props: {         pageProps: {           layoutData: { sitecore: { context: { itemPath } = {}, route } = {} } = {},         } = {},       } = {},     } = data;      if (!route || !validateData(data, acceptPageType)) {       return [];     }      return doProcessData(itemPath, route);   }    function doProcessData(urlPath, data) {     const {       displayName,       itemId,       fields: { Image, Content, Audience, Excerpt, PublishDate },     } = data;      const content = $('.section-content .right-column .rich-text p').text();     const { value: { thumbnailsrc: image_thumb_url, src: image_url } = {} } = Image;     const { value: content_html } = Content;     const { value: excerpt } = Excerpt;     const { value: publish_date } = PublishDate;     const audience = getDisplayNameList(Audience);      return [       {         content,         content_html,         excerpt,         image_thumb_url,         image_url,         publish_date,         audience,         type: 'content',         id: itemId,         name: displayName,         url: urlPath,       },     ];   }    const $ = response.body;   const dataNode = $('#__NEXT_DATA__');    if (!dataNode) {     return [];   }    let data;    try {     data = JSON.parse(dataNode.html());   } catch (e) {     return [];   }    try {     return processData(data, 'news');   } catch (e) {     return [];   } }",
              "isLocalized": false
            },
            {
              "tag": "vendor",
              "source": "function extract(request, response) {   function validateData(data, acceptPageType) {     const { query: { path = [] } = {} } = data;     return path[1] === acceptPageType;   }    function getDisplayNameList(list) {     return list.map(({ displayName }) => displayName);   }    function processData(data, acceptPageType) {     const {       props: {         pageProps: {           layoutData: { sitecore: { context: { itemPath } = {}, route } = {} } = {},         } = {},       } = {},     } = data;      if (!route || !validateData(data, acceptPageType)) {       return [];     }      return doProcessData(itemPath, route);   }    function doProcessData(urlPath, data) {     const {       displayName,       itemId,       fields: { Logo, Sessions, ActivityType, Speakers, Level },     } = data;      const description = $('.section-content .rich-text').text();     const { value: { thumbnailsrc: image_thumb_url, src: image_url } = {} } = Logo;     const { value: level } = Level;     const activities = getDisplayNameList(ActivityType);     const speakers = getDisplayNameList(Speakers);      const days = [...new Set([...$('.session-info-date')].map((e) => $(e).text().trim()))];     const time_slots = [...new Set([...$('.session-info-time')].map((e) => $(e).text().trim()))];     const rooms = [       ...new Set(         [           ...$('div.info-col-content > div.info-text > span:nth-child(2):not(.session-info-time)'),         ].map((e) => $(e).text().trim())       ),     ];      return [       {         description,         image_thumb_url,         image_url,         activities,         speakers,         level,         rooms,         days,         time_slots,         type: 'vendor',         id: itemId,         name: displayName,         url: urlPath,         sessions: getDisplayNameList(Sessions),       },     ];   }    const $ = response.body;   const dataNode = $('#__NEXT_DATA__');    if (!dataNode) {     return [];   }    let data;    try {     data = JSON.parse(dataNode.html());   } catch (e) {     return [];   }    try {     return processData(data, 'vendors');   } catch (e) {     return [];   } }",
              "isLocalized": false
            },
            {
              "tag": "sponsor",
              "source": "function extract(request, response) {   function validateData(data, acceptPageType) {     const { query: { path = [] } = {} } = data;     return path[1] === acceptPageType;   }    function getDisplayNameList(list) {     return list.map(({ displayName }) => displayName);   }    function processData(data, acceptPageType) {     const {       props: {         pageProps: {           layoutData: { sitecore: { context: { itemPath } = {}, route } = {} } = {},         } = {},       } = {},     } = data;      if (!route || !validateData(data, acceptPageType)) {       return [];     }      return doProcessData(itemPath, route);   }    function doProcessData(urlPath, data) {     const {       displayName,       itemId,       fields: { Logo, Sessions, Speakers, Level },     } = data;      const description = $('.section-content .rich-text').text();     const { value: { thumbnailsrc: image_thumb_url, src: image_url } = {} } = Logo;     const { value: level } = Level;     const speakers = getDisplayNameList(Speakers);      const days = [...new Set([...$('.session-info-date')].map((e) => $(e).text().trim()))];     const time_slots = [...new Set([...$('.session-info-time')].map((e) => $(e).text().trim()))];     const rooms = [       ...new Set(         [           ...$('div.info-col-content > div.info-text > span:nth-child(2):not(.session-info-time)'),         ].map((e) => $(e).text().trim())       ),     ];      return [       {         description,         image_thumb_url,         image_url,         speakers,         level,         days,         time_slots,         rooms,         type: 'sponsor',         id: itemId,         name: displayName,         url: urlPath,         sessions: getDisplayNameList(Sessions),       },     ];   }    const $ = response.body;   const dataNode = $('#__NEXT_DATA__');    if (!dataNode) {     return [];   }    let data;    try {     data = JSON.parse(dataNode.html());   } catch (e) {     return [];   }    try {     return processData(data, 'sponsors');   } catch (e) {     return [];   } }",
              "isLocalized": false
            },
            {
              "tag": "session",
              "source": "function extract(request, response) {   function validateData(data, acceptPageType) {     const { query: { path = [] } = {} } = data;     return path[1] === acceptPageType;   }    function getDisplayNameList(list) {     return list.map(({ displayName }) => displayName);   }    function processData(data, acceptPageType) {     const {       props: {         pageProps: {           layoutData: { sitecore: { context: { itemPath } = {}, route } = {} } = {},         } = {},       } = {},     } = data;      if (!route || !validateData(data, acceptPageType)) {       return [];     }      return doProcessData(itemPath, route);   }    function doProcessData(urlPath, data) {     const {       displayName,       itemId,       fields: { Timeslots, Rooms, Image, Speakers, Sponsors, Audience, Vendors, Day, Premium },     } = data;      const description = $('.section-content .rich-text').text();     const { value: { thumbnailsrc: image_thumb_url, src: image_url } = {} } = Image;     const { value: is_premium } = Premium;     const time_slots = getDisplayNameList(Timeslots);     const duration = time_slots.length;      return [       {         description,         image_thumb_url,         image_url,         is_premium,         time_slots,         duration,         type: 'session',         id: itemId,         name: displayName,         url: urlPath,         rooms: getDisplayNameList(Rooms),         speakers: getDisplayNameList(Speakers),         vendors: getDisplayNameList(Vendors),         sponsors: getDisplayNameList(Sponsors),         audience: getDisplayNameList(Audience),         days: getDisplayNameList(Day),         start_time: time_slots[0],       },     ];   }    const $ = response.body;   const dataNode = $('#__NEXT_DATA__');    if (!dataNode) {     return [];   }    try {     return processData(JSON.parse(dataNode.html()), 'sessions');   } catch (e) {     return [];   } }",
              "isLocalized": false
            },
            {
              "tag": "speaker",
              "source": "function extract(request, response) {   function validateData(data, acceptPageType) {     const { query: { path = [] } = {} } = data;     return path[1] === acceptPageType;   }    function getDisplayNameList(list) {     return list.map(({ displayName }) => displayName);   }    function processData(data, acceptPageType) {     const {       props: {         pageProps: {           layoutData: { sitecore: { context: { itemPath } = {}, route } = {} } = {},         } = {},       } = {},     } = data;      if (!route || !validateData(data, acceptPageType)) {       return [];     }      return doProcessData(itemPath, route);   }    function doProcessData(urlPath, data) {     const {       displayName,       itemId,       fields: { Picture, Featured, Company, Location, JobTitle, Sessions },     } = data;      const description = $('.section-content .rich-text').text();     const { value: { thumbnailsrc: image_thumb_url, src: image_url } = {} } = Picture;     const { value: is_featured } = Featured;     const { value: location } = Location;     const { value: job_title } = JobTitle;     const { value: company } = Company;      const days = [...new Set([...$('.session-info-date')].map((e) => $(e).text().trim()))];     const time_slots = [...new Set([...$('.session-info-time')].map((e) => $(e).text().trim()))];     const rooms = [       ...new Set(         [           ...$('div.info-col-content > div.info-text > span:nth-child(2):not(.session-info-time)'),         ].map((e) => $(e).text().trim())       ),     ];      return [       {         description,         image_thumb_url,         image_url,         location,         job_title,         is_featured,         company,         days,         time_slots,         rooms,         type: 'speaker',         id: itemId,         name: displayName,         url: urlPath,         sessions: getDisplayNameList(Sessions),       },     ];   }    const $ = response.body;   const dataNode = $('#__NEXT_DATA__');   if (!dataNode) {     return [];   }    let data;   try {     data = JSON.parse(dataNode.html());   } catch (e) {     return [];   }    try {     return processData(data, 'speakers');   } catch (e) {     return [];   } }",
              "isLocalized": false
            }
          ]
        }
      }
    }
  }
}
