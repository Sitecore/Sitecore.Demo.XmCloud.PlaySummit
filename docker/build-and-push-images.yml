# Build Sitecoredemo Docker images
trigger:
  branches:
    include:
    - develop

resources:
- repo: self
  clean: true

variables:
  GitVersion.SemVer: ''
  SITECORE_VERSION: '1-ltsc2019'
  GitVersion.PreReleaseLabel: ''
  tag: '$(GitVersion.SemVer)'
  additionalImageTags: ''
  preRelease: 'false'

stages:
- stage: Build
  displayName: "Lint and Build Website"
  dependsOn: []
  jobs:
    - job: Build
      pool:
        name: 'docker-ltsc2019-agents'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.15.1'
          displayName: 'Install Node.js'
        - task: Cache@2
          displayName: "Cache npm packages"
          inputs:
            key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/src/rendering/package-lock.json'
            path: '$(Build.SourcesDirectory)/src/rendering/node_modules'
            cacheHitVar: 'CacheRestored'
        - script: |
            npm install
          displayName: 'npm install'
          workingDirectory: src/rendering
          condition: ne(variables['CacheRestored'],'true')
        - script: |
            npm run lint
          displayName: 'npm run lint'
          workingDirectory: src/rendering
        - script: |
            npm run build:local
          displayName: 'npm run build:local'
          workingDirectory: src/rendering

- stage: Build_Storybook
  displayName: "Build Website Storybook, Push to Chromatic"
  dependsOn: []
  jobs:
    - job: Build
      pool:
        name: 'docker-ltsc2019-agents'
      steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '16.15.1'
          displayName: 'Install Node.js'
        - task: Cache@2
          displayName: "Cache npm packages"
          inputs:
            key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/src/rendering/package-lock.json'
            path: '$(Build.SourcesDirectory)/src/rendering/node_modules'
            cacheHitVar: 'CacheRestored'
        - script: |
            npm install
          displayName: 'npm install'
          workingDirectory: src/rendering
          condition: ne(variables['CacheRestored'],'true')
        - script: |
            npm run build-storybook
          displayName: 'npm run build-storybook'
          workingDirectory: src/rendering
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "src/rendering/storybook-static"
            artifact: "Storybook"
            publishLocation: "pipeline"
        # - script: |
        #     npx chromatic --project-token $(chromatic.project.token) --auto-accept-changes
        #   displayName: 'Push to Chromatic'
        #   workingDirectory: src/rendering

- stage: Docker_Windows
  displayName: "Build Windows Images"
  dependsOn:
  - Build
  - Build_Storybook
  jobs:
  - job: Build_Headless
    timeoutInMinutes: 120
    displayName: 'Build Windows Docker Images'
    pool:
      name: 'docker-ltsc2019-agents'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
        installationPath: 'c:/program files/dotnet'
        performMultiLevelLookup: true
    - template: version.yml
    - task: PowerShell@2
      displayName: "Build and Push Images"
      inputs:
        targetType: 'inline'
        script: |
          $sitecoreRegistry = "$(sitecore.container.registry)"

          az login -u "$(sitecore.container.registry.username)" -p "${env:SITECORE_CONTAINER_REGISTRY_PASSWORD}" -t "$(sitecore.container.registry.tenant)"

          if ("$sitecoreRegistry" -ne "scr.sitecore.com/"){
            az acr login -n "$(sitecore.container.registry.short)"
          }

          az acr login -n $(container.registry.short)

          $params = @{}
          $params.Add("DemoVersion", "$(tag)")
          $params.Add("DemoTeamRegistry","$(REGISTRY)")
          $params.Add("SitecoreRegistry","$sitecoreRegistry")
          $params.Add("SitecoreVersion","$(SITECORE_VERSION)")


          if ("true" -eq "$(preRelease)"){
            $params.Add("PreRelease", $true)
            $params.Add("SitecoreNugetSource","$(INTERNAL_SITECORE_NUGET_SOURCE)")
            $params.Add("Sitecore2NugetSource","$(INTERNAL_SITECORE2_NUGETSOURCE)")
            $params.Add("SitecoreGalleryNugetSource","$(INTERNAL_SITECOREGALLERY_NUGET_SOURCE)")
            $params.Add("NugetUser","$(INTERNAL_NUGET_SOURCE_USERNAME)")
            $params.Add("NugetPassword","$(INTERNAL_NUGET_SOURCE_PASSWORD)")
          }
          ./init-ci.ps1 @params

          ### Build Solution

          # Reset demo version to correct tag without build id
          $env:DEMO_VERSION = "$(tag)"

          docker-compose build $(no.cache) --parallel solution nodejs

          $primaryBuild = $(if ([string]::IsNullOrEmpty("$(additionalImageTags)")) { $false } else { $true })
          if ($primaryBuild) {
            $env:DEMO_VERSION = "$(additionalImageTags)"
            docker-compose build --parallel solution nodejs
          }

          ### Build Demo images

          # Reset demo version to correct tag without build id

          $env:DEMO_VERSION = "$(tag)"
          $services = ([System.Collections.ArrayList] $(docker-compose config --services))

          # Remove services already built in previous step
          $services.Remove("solution")
          $services.Remove("nodejs")

          docker-compose build $(no.cache) --parallel $services
          # docker-compose push $services

          $primaryBuild = $(if ([string]::IsNullOrEmpty("$(additionalImageTags)")) { $false } else { $true })
          if ($primaryBuild) {
            $env:DEMO_VERSION = "$(additionalImageTags)"
            docker-compose build --parallel $services
            # docker-compose push $services
          }

- stage: Release_Notes
  displayName: "Create Release Notes"
  dependsOn:
    - Docker_Windows
  condition: and(succeeded('Docker_Windows'),or( eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
  jobs:
    - job: Generate_Release_Notes
      pool:
        vmImage: "windows-latest"
      displayName: "Generate Release Notes"
      steps:
        - template: version.yml
        - task: XplatGenerateReleaseNotes@3
          inputs:
            outputfile: "$(Build.ArtifactStagingDirectory)/releasenotes-playsummit-xmc-$(GitVersion.SemVer).md"
            templateLocation: "File"
            templatefile: "release-notes-template.hb"
            dumpPayloadToConsole: true
            dumpPayloadToFile: false
            replaceFile: true
            appendToFile: false
            getParentsAndChildren: False
            sortWi: true
            checkStage: false
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "$(Build.ArtifactStagingDirectory)/releasenotes-playsummit-xmc-$(GitVersion.SemVer).md"
            artifact: "Release Notes"
            publishLocation: "pipeline"
        - task: AzureCLI@2
          displayName: "Upload release notes"
          inputs:
            azureSubscription: "$(azure.subscription)"
            scriptType: "pscore"
            scriptLocation: "inlineScript"
            inlineScript: "az storage file upload --account-name dockerassets  --share-name release-notes --source $(Build.ArtifactStagingDirectory)/releasenotes-playsummit-xmc-$(GitVersion.SemVer).md"
